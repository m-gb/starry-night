{"version":3,"sources":["ErrorBoundary.tsx","home/Home.tsx","nav/SearchBar.tsx","nav/UnitConverter.tsx","nav/favicon.ico","nav/NavBar.tsx","utils/utils.ts","weather/CurrentWeather.tsx","weather/ForecastWeather.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ErrorBoundary","props","state","error","undefined","info","this","setState","className","message","children","Component","Home","id","SearchBar","handleQueryChange","e","query","currentTarget","value","handleSearch","preventDefault","submitSearch","onSubmit","type","name","placeholder","onChange","onClick","icon","faSearch","UnitConverter","handleClick","newUnit","innerText","convertUnit","unit","NavBar","sendNewUnitToParent","sendNewQueryToParent","newQuery","alt","src","logo","capitalize","text","split","map","w","charAt","toUpperCase","slice","join","getDayName","time","Date","getDay","getIconColor","weatherId","includes","parseWeatherData","data","location","sys","country","weather","weatherDesc","description","day","dt","rawDate","date","getDate","getMonth","getFullYear","temp","Math","round","main","pressure","humidity","windSpeed","wind","speed","err","Error","CurrentWeather","weatherData","currentWeatherData","title","windSpeedUnit","ForecastWeather","showForecastdata","forecastData","element","parsedWeatherData","noonList","list","filter","item","dt_txt","today","now","todayDate","shift","pop","sortForecastData","forecastWeatherData","parseForecastData","App","onConvertUnit","notifyStateChange","onSubmitSearch","coordinates","geolocation","navigator","getCurrentPosition","position","latitude","coords","longitude","hasCoordinates","hasQuery","fetchWeatherForecast","then","currentData","catch","service","API_KEY","process","queryParams","unitType","uri","axios","get","res","hasCurrentData","hasForecastData","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b905c081.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\ninterface ErrorBoundaryState {\n  error?: any,\n  info?: any\n}\n\nclass ErrorBoundary extends Component<{}, ErrorBoundaryState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      error: undefined,\n      info: undefined\n    };\n  }\n\n  componentDidCatch(error: Error, info: any) {\n    this.setState({\n      error: error,\n      info: info\n    });\n  }\n\n  render() {\n    if(this.state.error) {\n      return (\n        <div className=\"text-light\">\n          <h3 className=\"error-message\">{this.state.error.message}</h3>\n        </div>\n      );\n    }\n    else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport './Home.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div id=\"home\">\n        <div className=\"info\">\n          <h1><b>Starry Night</b></h1>\n          <p>This website uses the OpenWeatherMap service to retrieve and display the current weather, as well as the forecast for the next 4 days.</p>\n          <p>You can choose to provide your current location by allowing geolocation access, or enter a desired location in the search bar (in English or Hebrew).</p>\n          <p>It's also possible to convert the units from Celsius to Fahrenheit.</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\ninterface SearchBarProps {\n  submitSearch: (newQuery: string) => void\n}\n\ninterface SearchBarState {\n  query: string\n}\n\nclass SearchBar extends Component<SearchBarProps, SearchBarState> {\n  constructor(props: SearchBarProps) {\n    super(props);\n    this.state = {\n      query: ''\n    };\n  }\n\n  handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: e.currentTarget.value\n    });\n  }\n\n  handleSearch = (e: React.SyntheticEvent<HTMLElement>) => {\n    e.preventDefault();\n    this.props.submitSearch(this.state.query);\n  }\n\n  render() {\n    return (\n      <form className=\"form-inline\" onSubmit={this.handleSearch}>\n        <div className=\"input-group\">\n          <input\n            className=\"form-control\"\n            type=\"search\"\n            value={this.state.query}\n            name=\"SearchBar\"\n            id=\"SearchBar\"\n            placeholder=\"Enter City\"\n            onChange={this.handleQueryChange} />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-info\" onClick={this.handleSearch}><FontAwesomeIcon icon={ faSearch } /></button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\n\ninterface UnitConverterProps {\n  convertUnit: (newUnit: string) => void,\n  unit: string\n}\n\nclass UnitConverter extends Component<UnitConverterProps, {}> {\n  handleClick = (e: React.MouseEvent<HTMLSpanElement>) => {\n    const newUnit: string = e.currentTarget.innerText;\n    this.props.convertUnit(newUnit);\n  }\n\n  render() {\n    return (\n      <div className=\"border border-info mx-2 rounded\">\n        <button className={`btn text-light ${this.props.unit === 'C' ? \"btn-info\" : \"\"}`} onClick={this.handleClick}>C</button>\n        <button className={`btn text-light ${this.props.unit === 'F' ? \"btn-info\" : \"\"}`} onClick={this.handleClick}>F</button>\n      </div>\n    );\n  }\n}\n\nexport default UnitConverter;\n","export default __webpack_public_path__ + \"static/media/favicon.a4009289.ico\";","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\nimport UnitConverter from './UnitConverter';\nimport logo from './favicon.ico';\n\ninterface NavBarProps {\n  convertUnit: (newUnit: string) => void,\n  submitSearch: (newQuery: string) => void\n  unit: string\n}\n\nclass NavBar extends Component<NavBarProps, {}> {\n  sendNewUnitToParent = (newUnit: string) => {\n    this.props.convertUnit(newUnit);\n  }\n\n  sendNewQueryToParent = (newQuery: string) => {\n    this.props.submitSearch(newQuery);\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <div className=\"collapse navbar-collapse\">\n          <span className=\"navbar-brand text-info\"><img alt=\"\" className=\"logo\" src={logo} /> Starry Night</span>\n        </div>\n          <UnitConverter convertUnit={this.sendNewUnitToParent} unit={this.props.unit} />\n          <SearchBar submitSearch={this.sendNewQueryToParent} />\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export function capitalize(text: string): string {\n  const splitWords: string[] = text.split(' ');\n  const uppercaseWords: string[] = splitWords.map(w => w.charAt(0).toUpperCase() + w.slice(1));\n  return uppercaseWords.join(' ');\n}\n\nexport function getDayName(time: number): string {\n  const days: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday ', 'Friday', 'Saturday'];\n  return days[(new Date(time).getDay())];\n}\n\nexport function getMonthName(time: number): string {\n  const months: string[] = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return months[(new Date(time).getMonth())];\n}\n\nexport function getIconColor(weatherId: number): string {\n  const blue: number[] = [300, 301, 302, 310, 311, 313, 314, 321, 500, 501, 502, 503, 504, 511, 520, 521, 522, 531, 611, 612, 615, 616, 620, 701];\n  const yellow: number[] = [210, 211, 212, 221, 731, 761, 762, 800];\n  if (blue.includes(weatherId)) {\n    return 'wi-blue';\n  }\n  else if (yellow.includes(weatherId)) {\n    return 'wi-yellow';\n  }\n  else {\n    return 'wi-gray';\n  }\n}\n","import React, { Component } from 'react';\nimport { capitalize, getDayName, getMonthName, getIconColor } from '../utils/utils';\n\ninterface CurrentWeatherProps {\n  currentWeatherData: any,\n  windSpeedUnit: string\n}\n\ninterface WeatherData {\n  location: string,\n  weatherId: number,\n  weatherDesc: string,\n  day: string,\n  date: string,\n  temp: number,\n  pressure: number,\n  humidity: number,\n  windSpeed: number\n}\n\nexport function parseWeatherData(data: any): WeatherData {\n  try {\n    const location = `${data.name}, ${data.sys.country}`;\n    const weatherId = data.weather[0].id;\n    const weatherDesc = data.weather[0].description;\n    const day = getDayName(data.dt * 1000);\n    const rawDate = new Date(data.dt * 1000);\n    const date = `${rawDate.getDate()} ${getMonthName(data.dt * 1000)} ${rawDate.getFullYear()}`;\n    const temp = Math.round(data.main.temp);\n    const pressure = data.main.pressure;\n    const humidity = data.main.humidity;\n    const windSpeed = data.wind.speed;\n    return {\n      location,\n      weatherId,\n      weatherDesc,\n      day,\n      date,\n      temp,\n      pressure,\n      humidity,\n      windSpeed\n    };\n  }\n  catch (err) {\n    throw new Error(`There was an issue parsing the weather data: ${err.message}`);\n  }\n}\n\nclass CurrentWeather extends Component<CurrentWeatherProps, {}> {\n  render() {\n    const weatherData: WeatherData = parseWeatherData(this.props.currentWeatherData);\n    return (\n      <div>\n        <h5 className=\"text-center py-3\">{weatherData.location}</h5>\n        <div className=\"row pb-5\">\n          <div className=\"col-lg-3 text-center\">\n            <div className=\"pt-5\">\n              <h3>{weatherData.day}</h3>\n              <h3>{weatherData.date}</h3>\n            </div>\n          </div>\n          <div className=\"col-lg-3 text-center\">\n            <i className={`current-img wi ${getIconColor(weatherData.weatherId)} wi-owm-${weatherData.weatherId}`} />\n            <h5 className=\"pt-5\">{capitalize(weatherData.weatherDesc)}</h5>\n          </div>\n          <div className=\"col-lg-3 text-center\">\n            <h1 className=\"pt-5\"> {weatherData.temp}<i className=\"wi wi-degrees\" /></h1>\n          </div>\n          <div className=\"col-lg-3\">\n            <div className=\"pt-4\">\n              <p className=\"my-3\" title=\"Humidity\"><i className=\"wi wi-blue wi-humidity\" /> {weatherData.humidity}%</p>\n              <p className=\"my-3\" title=\"Pressure\"><i className=\"wi wi-yellow wi-barometer\" /> {weatherData.pressure} hPa</p>\n              <p className=\"my-3\" title=\"Wind Speed\"><i className=\"wi wi-gray wi-strong-wind\" /> {weatherData.windSpeed} {this.props.windSpeedUnit}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CurrentWeather;\n","import React, { Component } from 'react';\nimport { getDayName, getIconColor, capitalize } from '../utils/utils';\n\ninterface ForecastWeatherProps {\n  forecastWeatherData: any\n}\n\ninterface ForecastWeatherState {\n  weatherData: WeatherData[]\n}\n\ninterface WeatherData {\n  weatherId: number,\n  weatherDesc: string,\n  temp: number,\n  day: string\n}\n\n// Retrieves the predictions at noon for the next 4 days,\n// since the API call returns a list of 8 predictions per day for 5 days.\nexport function sortForecastData(data: any): any {\n  try {\n    let noonList: any = data.list.filter((item: any) => item.dt_txt.split(' ')[1].includes('12'));\n    let today: Date = new Date(Date.now());\n    let todayDate: string = `${today.getFullYear()}-${today.getMonth()}-${today.getDate()}`;\n    let dt: Date = new Date(noonList[0].dt * 1000);\n    let firstElementDate: string = `${dt.getFullYear()}-${dt.getMonth()}-${dt.getDate()}`;\n    // Removes the first element if today is part of the results (i.e. before 15:00).\n    if (firstElementDate === todayDate) {\n      noonList.shift();\n    }\n    else {\n      noonList.pop();\n    }\n    return noonList;\n  }\n  catch (err) {\n    throw new Error(`There was an issue sorting the forecast data: ${err.message}`);\n  }\n}\n\n// Extracts relevant information from the API result.\nexport function parseForecastData(data: any): WeatherData {\n  try {\n    const weatherId: number = data.weather[0].id;\n    const weatherDesc: string = data.weather[0].description;\n    const temp: number = Math.round(data.main.temp);\n    const day: string = getDayName(data.dt * 1000);\n    return {\n      weatherId,\n      weatherDesc,\n      temp,\n      day\n    };\n  }\n  catch (err) {\n    throw new Error(`There was an issue parsing the forecast data: ${err.message}`);\n  }\n}\n\nclass ForecastWeather extends Component<ForecastWeatherProps, ForecastWeatherState> {\n  constructor(props: ForecastWeatherProps) {\n    super(props);\n    this.state = {\n      weatherData: []\n    }\n  }\n\n  componentDidMount() {\n    const sortedWeatherData: any = sortForecastData(this.props.forecastWeatherData);\n    const parsedWeatherData: WeatherData[] = sortedWeatherData.map((element: any) => parseForecastData(element));\n    this.setState({\n      weatherData: parsedWeatherData\n    });\n  }\n\n  showForecastdata = (forecastData: WeatherData[]): JSX.Element[] => {\n    return forecastData.map(element => (\n      <div className=\"col-lg-3\" key={element.day}>\n        <div className=\"card bg-transparent card-bg text-center mb-4\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{element.day}</h5>\n            <p className=\"card-text\">{element.temp}<i className=\"wi wi-degrees\" /></p>\n            <p className=\"card-text\">{capitalize(element.weatherDesc)}</p>\n            <i className={`forecast-img wi ${getIconColor(element.weatherId)} wi-owm-${element.weatherId}`} />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        {this.showForecastdata(this.state.weatherData)}\n      </div>\n    );\n  }\n}\n\nexport default ForecastWeather;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ErrorBoundary from './ErrorBoundary';\nimport Home from './home/Home';\nimport NavBar from './nav/NavBar';\nimport CurrentWeather from './weather/CurrentWeather';\nimport ForecastWeather from './weather/ForecastWeather';\n\ninterface AppState {\n  query: string,\n  unit: string,\n  coordinates?: { latitude: number, longitude: number },\n  currentWeatherData?: any,\n  forecastWeatherData?: any\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      query: '',\n      unit: 'C'\n    };\n  }\n\n  onConvertUnit = (newUnit: string) => {\n    this.setState({\n      unit: newUnit,\n      forecastWeatherData: undefined // Reset forecastWeatherData\n    }, this.notifyStateChange);\n  }\n\n  onSubmitSearch = (newQuery: string) => {\n    this.setState({\n      query: newQuery,\n      coordinates: undefined // Reset coordinates\n    }, this.notifyStateChange);\n  }\n\n  // Retrieves coordinates if the browser supports geolocation and permission is granted.\n  componentDidMount() {\n    const geolocation: Geolocation = navigator.geolocation;\n    if (geolocation) {\n      geolocation.getCurrentPosition((position) => {\n        this.setState({\n          coordinates: { latitude: position.coords.latitude, longitude: position.coords.longitude }\n        }, this.notifyStateChange);\n      }, () => {\n        this.setState(() => {\n          throw new Error('Geolocation permission was denied.');\n        });\n      });\n    } else {\n      throw new Error('Geolocation is not supported by the browser.');\n    }\n  }\n\n  notifyStateChange() {\n    const hasCoordinates: boolean = (this.state.coordinates !== undefined);\n    const hasQuery: boolean = (this.state.query !== '');\n    if (hasCoordinates || hasQuery) {\n      this.fetchWeatherForecast(this.state.coordinates, 'weather')\n        .then((currentData: any) => {\n          this.setState({\n            currentWeatherData: currentData\n          });\n        })\n        .catch((err: Error) => {\n          this.setState(() => {\n            throw new Error(`There was an issue processing the weather service data: ${err.message}`);\n          });\n        });\n      this.fetchWeatherForecast(this.state.coordinates, 'forecast')\n        .then((forecastData: any) => {\n          this.setState({\n            forecastWeatherData: forecastData\n          });\n        })\n        .catch((err: Error) => {\n          this.setState(() => {\n            throw new Error(`There was an issue processing the weather service data: ${err.message}`);\n          });\n        });\n    }\n  }\n\n  // Retrieve weather data from the API\n  fetchWeatherForecast(coordinates: any, service: string): Promise<any> {\n    const API_KEY: string = `${process.env.REACT_APP_API_KEY}`;\n    const BASE_URI: string = 'https://api.openweathermap.org/data/2.5';\n    const queryParams: string = (coordinates) ? `lat=${coordinates.latitude}&lon=${coordinates.longitude}` : `q=${this.state.query}`;\n    const unitType: string = (this.state.unit === 'C') ? 'metric' : 'imperial';\n    const uri: string = `${BASE_URI}/${service}?${queryParams}&units=${unitType}&cnt=40&appid=${API_KEY}`;\n    return axios.get(uri).then(res => {\n      return res.data;\n    }).catch((err: Error) => {\n      this.setState(() => {\n        throw new Error(`Failed to retrieve data from the weather service: ${err.message}`);\n      });\n    });\n  }\n\n  render() {\n    const hasCurrentData = this.state.currentWeatherData;\n    const hasForecastData = this.state.forecastWeatherData;\n    const windSpeedUnit = (this.state.unit === 'C') ? 'm/s' : 'miles/hr';\n    return (\n      <div>\n        <Home />\n        <div className=\"weather-data\">\n          <NavBar convertUnit={this.onConvertUnit} submitSearch={this.onSubmitSearch} unit={this.state.unit} />\n          <div className=\"text-light data-background\">\n            {\n              (hasCurrentData && hasForecastData) ?\n                (\n                  <main className=\"container\">\n                    <ErrorBoundary>\n                      <CurrentWeather currentWeatherData={hasCurrentData} windSpeedUnit={windSpeedUnit} />\n                      <ForecastWeather forecastWeatherData={hasForecastData} />\n                    </ErrorBoundary>\n                  </main>\n                ):\n                (\n                  <main className=\"container\">\n                    <h3 className=\"error-message\">Please allow location access or enter a city in the search bar.</h3>\n                  </main>\n                )\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ErrorBoundary from './ErrorBoundary';\n\nReactDOM.render(<ErrorBoundary><App /></ErrorBoundary>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}