{"version":3,"sources":["ErrorBoundary.tsx","nav/SearchBar.tsx","nav/UnitConverter.tsx","nav/NavBar.tsx","utils/utils.ts","weather/CurrentWeather.tsx","weather/ForecastWeather.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","undefined","info","setState","react_default","a","createElement","className","message","children","Component","SearchBar","handleQueryChange","e","query","currentTarget","value","handleSearch","preventDefault","submitSearch","onSubmit","type","name","id","placeholder","onChange","onClick","index_es","icon","faSearch","UnitConverter","handleClick","newUnit","innerText","convertUnit","concat","unit","NavBar","sendNewUnitToParent","sendNewQueryToParent","newQuery","src","nav_UnitConverter","nav_SearchBar","capitalize","text","split","map","w","charAt","toUpperCase","slice","join","getDayName","time","Date","getDay","getIconColor","weatherId","includes","parseWeatherData","data","location","sys","country","weather","weatherDesc","description","day","dt","rawDate","date","getDate","getMonth","getFullYear","temp","Math","round","main","pressure","humidity","windSpeed","wind","speed","err","Error","CurrentWeather","weatherData","currentWeatherData","title","windSpeedUnit","ForecastWeather","showForecastdata","forecastData","element","key","parsedWeatherData","noonList","list","filter","item","dt_txt","today","now","todayDate","shift","pop","sortForecastData","forecastWeatherData","parseForecastData","App","onConvertUnit","notifyStateChange","onSubmitSearch","coordinates","_this2","geolocation","navigator","getCurrentPosition","position","latitude","coords","longitude","_this3","hasCoordinates","hasQuery","fetchWeatherForecast","then","currentData","catch","service","_this4","API_KEY","process","queryParams","unitType","uri","axios","get","res","hasCurrentData","hasForecastData","nav_NavBar","src_ErrorBoundary","weather_CurrentWeather","weather_ForecastWeather","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.910972b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\ninterface ErrorBoundaryState {\n  error?: any,\n  info?: any\n}\n\nclass ErrorBoundary extends Component<{}, ErrorBoundaryState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      error: undefined,\n      info: undefined\n    };\n  }\n\n  componentDidCatch(error: Error, info: any) {\n    this.setState({\n      error: error,\n      info: info\n    });\n  }\n\n  render() {\n    if(this.state.error) {\n      return (\n        <div className=\"text-light\">\n          <h3 className=\"error-message\">{this.state.error.message}</h3>\n        </div>\n      );\n    }\n    else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\ninterface SearchBarProps {\n  submitSearch: (newQuery: string) => void\n}\n\ninterface SearchBarState {\n  query: string\n}\n\nclass SearchBar extends Component<SearchBarProps, SearchBarState> {\n  constructor(props: SearchBarProps) {\n    super(props);\n    this.state = {\n      query: ''\n    };\n  }\n\n  handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: e.currentTarget.value\n    });\n  }\n\n  handleSearch = (e: React.SyntheticEvent<HTMLElement>) => {\n    e.preventDefault();\n    this.props.submitSearch(this.state.query);\n  }\n\n  render() {\n    return (\n      <form className=\"form-inline\" onSubmit={this.handleSearch}>\n        <div className=\"input-group\">\n          <input\n            className=\"form-control\"\n            type=\"search\"\n            value={this.state.query}\n            name=\"SearchBar\"\n            id=\"SearchBar\"\n            placeholder=\"Enter City\"\n            onChange={this.handleQueryChange} />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-info\" onClick={this.handleSearch}><FontAwesomeIcon icon={ faSearch } /></button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\n\ninterface UnitConverterProps {\n  convertUnit: (newUnit: string) => void,\n  unit: string\n}\n\nclass UnitConverter extends Component<UnitConverterProps, {}> {\n  handleClick = (e: React.MouseEvent<HTMLSpanElement>) => {\n    const newUnit: string = e.currentTarget.innerText;\n    this.props.convertUnit(newUnit);\n  }\n\n  render() {\n    return (\n      <div className=\"border border-info mx-2 rounded\">\n        <button className={`btn text-light ${this.props.unit == 'C' ? \"btn-info\" : \"\"}`} onClick={this.handleClick}>C</button>\n        <button className={`btn text-light ${this.props.unit == 'F' ? \"btn-info\" : \"\"}`} onClick={this.handleClick}>F</button>\n      </div>\n    );\n  }\n}\n\nexport default UnitConverter;\n","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\nimport UnitConverter from './UnitConverter';\n\ninterface NavBarProps {\n  convertUnit: (newUnit: string) => void,\n  submitSearch: (newQuery: string) => void\n  unit: string\n}\n\nclass NavBar extends Component<NavBarProps, {}> {\n  sendNewUnitToParent = (newUnit: string) => {\n    this.props.convertUnit(newUnit);\n  }\n\n  sendNewQueryToParent = (newQuery: string) => {\n    this.props.submitSearch(newQuery);\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <div className=\"collapse navbar-collapse\">\n          <span className=\"navbar-brand text-info\"><img className=\"logo\" src=\"favicon.ico\" /> Starry Night</span>\n        </div>\n          <UnitConverter convertUnit={this.sendNewUnitToParent} unit={this.props.unit} />\n          <SearchBar submitSearch={this.sendNewQueryToParent} />\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export function capitalize(text: string): string {\n  const splitWords: string[] = text.split(' ');\n  const uppercaseWords: string[] = splitWords.map(w => w.charAt(0).toUpperCase() + w.slice(1));\n  return uppercaseWords.join(' ');\n}\n\nexport function getDayName(time: number): string {\n  const days: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday ', 'Friday', 'Saturday'];\n  return days[(new Date(time).getDay())];\n}\n\nexport function getMonthName(time: number): string {\n  const months: string[] = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return months[(new Date(time).getMonth())];\n}\n\nexport function getIconColor(weatherId: number): string {\n  const blue: number[] = [300, 301, 302, 310, 311, 313, 314, 321, 500, 501, 502, 503, 504, 511, 520, 521, 522, 531, 611, 612, 615, 616, 620, 701];\n  const yellow: number[] = [210, 211, 212, 221, 731, 761, 762, 800];\n  if (blue.includes(weatherId)) {\n    return 'wi-blue';\n  }\n  else if (yellow.includes(weatherId)) {\n    return 'wi-yellow';\n  }\n  else {\n    return 'wi-gray';\n  }\n}\n","import React, { Component } from 'react';\nimport { capitalize, getDayName, getMonthName, getIconColor } from '../utils/utils';\n\ninterface CurrentWeatherProps {\n  currentWeatherData: any,\n  windSpeedUnit: string\n}\n\ninterface WeatherData {\n  location: string,\n  weatherId: number,\n  weatherDesc: string,\n  day: string,\n  date: string,\n  temp: number,\n  pressure: number,\n  humidity: number,\n  windSpeed: number\n}\n\nexport function parseWeatherData(data: any): WeatherData {\n  try {\n    const location = `${data.name}, ${data.sys.country}`;\n    const weatherId = data.weather[0].id;\n    const weatherDesc = data.weather[0].description;\n    const day = getDayName(data.dt * 1000);\n    const rawDate = new Date(data.dt * 1000);\n    const date = `${rawDate.getDate()} ${getMonthName(data.dt * 1000)} ${rawDate.getFullYear()}`;\n    const temp = Math.round(data.main.temp);\n    const pressure = data.main.pressure;\n    const humidity = data.main.humidity;\n    const windSpeed = data.wind.speed;\n    return {\n      location,\n      weatherId,\n      weatherDesc,\n      day,\n      date,\n      temp,\n      pressure,\n      humidity,\n      windSpeed\n    };\n  }\n  catch (err) {\n    throw new Error(`There was an issue parsing the weather data: ${err.message}`);\n  }\n}\n\nclass CurrentWeather extends Component<CurrentWeatherProps, {}> {\n  render() {\n    const weatherData: WeatherData = parseWeatherData(this.props.currentWeatherData);\n    return (\n      <div>\n        <h5 className=\"text-center py-3\">{weatherData.location}</h5>\n        <div className=\"row pb-5\">\n          <div className=\"col-lg-3 text-center\">\n            <div className=\"pt-5\">\n              <h3>{weatherData.day}</h3>\n              <h3>{weatherData.date}</h3>\n            </div>\n          </div>\n          <div className=\"col-lg-3 text-center\">\n            <i className={`current-img wi ${getIconColor(weatherData.weatherId)} wi-owm-${weatherData.weatherId}`} />\n            <h5 className=\"pt-5\">{capitalize(weatherData.weatherDesc)}</h5>\n          </div>\n          <div className=\"col-lg-3 text-center\">\n            <h1 className=\"pt-5\"> {weatherData.temp}<i className=\"wi wi-degrees\" /></h1>\n          </div>\n          <div className=\"col-lg-3\">\n            <div className=\"pt-4\">\n              <p className=\"my-3\" title=\"Humidity\"><i className=\"wi wi-blue wi-humidity\" /> {weatherData.humidity}%</p>\n              <p className=\"my-3\" title=\"Pressure\"><i className=\"wi wi-yellow wi-barometer\" /> {weatherData.pressure} hPa</p>\n              <p className=\"my-3\" title=\"Wind Speed\"><i className=\"wi wi-gray wi-strong-wind\" /> {weatherData.windSpeed} {this.props.windSpeedUnit}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CurrentWeather;\n","import React, { Component } from 'react';\nimport { getDayName, getIconColor, capitalize } from '../utils/utils';\n\ninterface ForecastWeatherProps {\n  forecastWeatherData: any\n}\n\ninterface ForecastWeatherState {\n  weatherData: WeatherData[]\n}\n\ninterface WeatherData {\n  weatherId: number,\n  weatherDesc: string,\n  temp: number,\n  day: string\n}\n\n// Retrieves the predictions at noon for the next 4 days,\n// since the API call returns a list of 8 predictions per day for 5 days.\nexport function sortForecastData(data: any): any {\n  try {\n    let noonList: any = data.list.filter((item: any) => item.dt_txt.split(' ')[1].includes('12'));\n    let today: Date = new Date(Date.now());\n    let todayDate: string = `${today.getFullYear()}-${today.getMonth()}-${today.getDate()}`;\n    let dt: Date = new Date(noonList[0].dt * 1000);\n    let firstElementDate: string = `${dt.getFullYear()}-${dt.getMonth()}-${dt.getDate()}`;\n    // Removes the first element if today is part of the results (i.e. before 15:00).\n    if (firstElementDate == todayDate) {\n      noonList.shift();\n    }\n    else {\n      noonList.pop();\n    }\n    return noonList;\n  }\n  catch (err) {\n    throw new Error(`There was an issue sorting the forecast data: ${err.message}`);\n  }\n}\n\n// Extracts relevant information from the API result.\nexport function parseForecastData(data: any): WeatherData {\n  try {\n    const weatherId: number = data.weather[0].id;\n    const weatherDesc: string = data.weather[0].description;\n    const temp: number = Math.round(data.main.temp);\n    const day: string = getDayName(data.dt * 1000);\n    return {\n      weatherId,\n      weatherDesc,\n      temp,\n      day\n    };\n  }\n  catch (err) {\n    throw new Error(`There was an issue parsing the forecast data: ${err.message}`);\n  }\n}\n\nclass ForecastWeather extends Component<ForecastWeatherProps, ForecastWeatherState> {\n  constructor(props: ForecastWeatherProps) {\n    super(props);\n    this.state = {\n      weatherData: []\n    }\n  }\n\n  componentDidMount() {\n    const sortedWeatherData: any = sortForecastData(this.props.forecastWeatherData);\n    const parsedWeatherData: WeatherData[] = sortedWeatherData.map((element: any) => parseForecastData(element));\n    this.setState({\n      weatherData: parsedWeatherData\n    });\n  }\n\n  showForecastdata = (forecastData: WeatherData[]): JSX.Element[] => {\n    return forecastData.map(element => (\n      <div className=\"col-lg-3\" key={element.day}>\n        <div className=\"card bg-dark text-center mb-4\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{element.day}</h5>\n            <p className=\"card-text\">{element.temp}<i className=\"wi wi-degrees\" /></p>\n            <p className=\"card-text\">{capitalize(element.weatherDesc)}</p>\n            <i className={`forecast-img wi ${getIconColor(element.weatherId)} wi-owm-${element.weatherId}`} />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        {this.showForecastdata(this.state.weatherData)}\n      </div>\n    );\n  }\n}\n\nexport default ForecastWeather;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ErrorBoundary from './ErrorBoundary';\nimport NavBar from './nav/NavBar';\nimport CurrentWeather from './weather/CurrentWeather';\nimport ForecastWeather from './weather/ForecastWeather';\n\ninterface AppState {\n  query: string,\n  unit: string,\n  coordinates?: { latitude: number, longitude: number },\n  currentWeatherData?: any,\n  forecastWeatherData?: any\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      query: '',\n      unit: 'C'\n    };\n  }\n\n  onConvertUnit = (newUnit: string) => {\n    this.setState({\n      unit: newUnit,\n      forecastWeatherData: undefined // Reset forecastWeatherData\n    }, this.notifyStateChange);\n  }\n\n  onSubmitSearch = (newQuery: string) => {\n    this.setState({\n      query: newQuery,\n      coordinates: undefined // Reset coordinates\n    }, this.notifyStateChange);\n  }\n\n  // Retrieves coordinates if the browser supports geolocation and permission is granted.\n  componentDidMount() {\n    const geolocation: Geolocation = navigator.geolocation;\n    if (geolocation) {\n      geolocation.getCurrentPosition((position) => {\n        this.setState({\n          coordinates: { latitude: position.coords.latitude, longitude: position.coords.longitude }\n        }, this.notifyStateChange);\n      }, () => {\n        this.setState(() => {\n          throw new Error('Geolocation permission was denied.');\n        });\n      });\n    } else {\n      throw new Error('Geolocation is not supported by the browser.');\n    }\n  }\n\n  notifyStateChange() {\n    const hasCoordinates: boolean = (this.state.coordinates != undefined);\n    const hasQuery: boolean = (this.state.query != '');\n    if (hasCoordinates || hasQuery) {\n      this.fetchWeatherForecast(this.state.coordinates, 'weather')\n        .then((currentData: any) => {\n          this.setState({\n            currentWeatherData: currentData\n          });\n        })\n        .catch((err: Error) => {\n          this.setState(() => {\n            throw new Error(`There was an issue processing the weather service data: ${err.message}`);\n          });\n        });\n      this.fetchWeatherForecast(this.state.coordinates, 'forecast')\n        .then((forecastData: any) => {\n          this.setState({\n            forecastWeatherData: forecastData\n          });\n        })\n        .catch((err: Error) => {\n          this.setState(() => {\n            throw new Error(`There was an issue processing the weather service data: ${err.message}`);\n          });\n        });\n    }\n  }\n\n  // Retrieve weather data from the API\n  fetchWeatherForecast(coordinates: any, service: string): Promise<any> {\n    const API_KEY: string = `${process.env.REACT_APP_API_KEY}`;\n    const BASE_URI: string = 'https://api.openweathermap.org/data/2.5';\n    const queryParams: string = (coordinates) ? `lat=${coordinates.latitude}&lon=${coordinates.longitude}` : `q=${this.state.query}`;\n    const unitType: string = (this.state.unit == 'C') ? 'metric' : 'imperial';\n    const uri: string = `${BASE_URI}/${service}?${queryParams}&units=${unitType}&cnt=40&appid=${API_KEY}`;\n    return axios.get(uri).then(res => {\n      return res.data;\n    }).catch((err: Error) => {\n      this.setState(() => {\n        throw new Error(`Failed to retrieve data from the weather service: ${err.message}`);\n      });\n    });\n  }\n\n  render() {\n    const hasCurrentData = this.state.currentWeatherData;\n    const hasForecastData = this.state.forecastWeatherData;\n    const windSpeedUnit = (this.state.unit == 'C') ? 'm/s' : 'miles/hr';\n    return (\n      <div>\n        <NavBar convertUnit={this.onConvertUnit} submitSearch={this.onSubmitSearch} unit={this.state.unit} />\n        <div className=\"text-light\">\n          {\n            (hasCurrentData && hasForecastData) ?\n              (\n                <main className=\"container\">\n                  <ErrorBoundary>\n                    <CurrentWeather currentWeatherData={hasCurrentData} windSpeedUnit={windSpeedUnit} />\n                    <ForecastWeather forecastWeatherData={hasForecastData} />\n                  </ErrorBoundary>\n                </main>\n              ) :\n              (\n                <main className=\"container\">\n                  <h3 className=\"error-message\">Please allow location access or enter a city in the search bar.</h3>\n                </main>\n              )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ErrorBoundary from './ErrorBoundary';\n\nReactDOM.render(<ErrorBoundary><App /></ErrorBoundary>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}